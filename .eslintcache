[{"/home/rajdeep/Desktop/beingpm/project/client/src/index.js":"1","/home/rajdeep/Desktop/beingpm/project/client/src/App.js":"2","/home/rajdeep/Desktop/beingpm/project/client/src/components/Intro.js":"3","/home/rajdeep/Desktop/beingpm/project/client/src/components/Login.js":"4","/home/rajdeep/Desktop/beingpm/project/client/src/components/Register.js":"5","/home/rajdeep/Desktop/beingpm/project/client/src/components/Dashboard.js":"6","/home/rajdeep/Desktop/beingpm/project/client/src/components/Saved.js":"7","/home/rajdeep/Desktop/beingpm/project/client/src/components/Singlecontent.js":"8","/home/rajdeep/Desktop/beingpm/project/client/src/components/Navbar.js":"9","/home/rajdeep/Desktop/beingpm/project/client/src/components/Content.js":"10","/home/rajdeep/Desktop/beingpm/project/client/src/components/Profile.js":"11"},{"size":272,"mtime":1610529621961,"results":"12","hashOfConfig":"13"},{"size":2447,"mtime":1611445875896,"results":"14","hashOfConfig":"13"},{"size":967,"mtime":1611693676690,"results":"15","hashOfConfig":"13"},{"size":4286,"mtime":1611460347429,"results":"16","hashOfConfig":"13"},{"size":4408,"mtime":1611460325366,"results":"17","hashOfConfig":"13"},{"size":1955,"mtime":1611419753870,"results":"18","hashOfConfig":"13"},{"size":16205,"mtime":1611443983223,"results":"19","hashOfConfig":"13"},{"size":4199,"mtime":1611419753894,"results":"20","hashOfConfig":"13"},{"size":1671,"mtime":1611452301773,"results":"21","hashOfConfig":"13"},{"size":4446,"mtime":1611419753870,"results":"22","hashOfConfig":"13"},{"size":2997,"mtime":1611460379290,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"geh1us",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"26"},"/home/rajdeep/Desktop/beingpm/project/client/src/index.js",[],["52","53"],"/home/rajdeep/Desktop/beingpm/project/client/src/App.js",[],"/home/rajdeep/Desktop/beingpm/project/client/src/components/Intro.js",["54"],"/home/rajdeep/Desktop/beingpm/project/client/src/components/Login.js",[],"/home/rajdeep/Desktop/beingpm/project/client/src/components/Register.js",[],"/home/rajdeep/Desktop/beingpm/project/client/src/components/Dashboard.js",[],"/home/rajdeep/Desktop/beingpm/project/client/src/components/Saved.js",["55","56","57"],"import React, { useState, useEffect, Fragment } from 'react';\nimport Styles from \"./SavedStyles.module.css\";\n\nimport Navbar from './Navbar';\nimport Content from './Content';\n\n// merged SavedtypeButton and itrs css\nimport SavedStyles from\"./SavedStyleTypeButton.module.css\";\nimport { BsArrowUpDown } from \"react-icons/bs\"\n\nconst Saved = (props) => {\n\n  const [contentData, setContentData] = useState([]);\n  const [userID, setUserID] = useState(\"\");\n\n  const [videoFilter, setVideoFilter] = useState(false);\n\n  const [articlesFilter, setArticlesFilter] = useState(false);\n\n  const [podcastFilter, setPodCastFilter] = useState(false);\n\n  const [newestFilter, setNewestFilter] = useState(false);\n\n  const [defaultFilter, setDefaultFilter] = useState(true);\n\n  const [removeSaved, setRemoceSaved] = useState(false);\n\n  const [clickAll, setClickAll] = useState(true);\n\n  const [clickVideo, setClickVideo] = useState(false);\n\n  const [clickArticle, setClickArticle] = useState(false);\n\n  const [clickPodcast, setClickPodcast] = useState(false);\n\n  const [clickNewest, setClickNewest] = useState(false);\n\n  async function getSavedContent(){\n    try {\n      if (!removeSaved) {\n        const userid = props.location.state.userid;\n        const body = {userid};\n\n        const response = await fetch(\"https://heypm-backend.herokuapp.com/getbookmarkContent\",{\n            method: \"POST\",\n            headers: {\"Content-Type\": \"application/json\", token: localStorage.token},\n            body: JSON.stringify(body)\n        });\n        const contentRes = await response.json();\n\n        setContentData(contentRes);\n        setUserID(props.location.state.userid);\n      }\n    }\n    catch (err) {\n        //console.error(err.message);\n    }\n  }\n\n  const ClickedOnNewest = (val) =>{\n    contentData.sort((a,b) => {\n      return  b.content_date - a.content_date\n    }).reverse();\n    if (newestFilter) {\n      setNewestFilter(false);\n      setClickNewest(false);\n    } else {\n      setNewestFilter(true);\n      setClickNewest(true);\n    }\n  }\n\n  const empVideoFilter = () =>{\n\n  }\n\n  const applyfilter = (val) =>{\n      if (val === \"Videos\") {\n        setVideoFilter(true);\n        setPodCastFilter(false);\n        setArticlesFilter(false);\n        setDefaultFilter(false);\n        setClickVideo(true);\n        setClickAll(false);\n        setClickArticle(false);\n        setClickPodcast(false);\n      } else if (val === \"Articles\") {\n        setVideoFilter(false);\n        setPodCastFilter(false);\n        setArticlesFilter(true);\n        setDefaultFilter(false);\n        setClickVideo(false);\n        setClickAll(false);\n        setClickArticle(true);\n        setClickPodcast(false);\n      } else if (val === \"Podcast\") {\n        setVideoFilter(false);\n        setPodCastFilter(true);\n        setArticlesFilter(false);\n        setDefaultFilter(false);\n        setClickVideo(false);\n        setClickAll(false);\n        setClickArticle(false);\n        setClickPodcast(true);\n      }\n      else if (val === \"All\") {\n        setVideoFilter(false);\n        setPodCastFilter(false);\n        setArticlesFilter(false);\n        setDefaultFilter(true);\n        setClickVideo(false);\n        setClickAll(true);\n        setClickArticle(false);\n        setClickPodcast(false);\n      }\n  }\n\n  const removeBookmarkContentChild = (index) =>{\n    for (var i = 0; i < contentData.length; i++) {\n      if (contentData[i].content_id === index) {\n        contentData.splice(i, 1);\n        break;\n      }\n    }\n    if (removeSaved) {\n      setRemoceSaved(false);\n    }\n    else {\n      setRemoceSaved(true);\n    }\n  }\n\n  useEffect(()=>{\n      getSavedContent();\n  },[removeSaved]);\n\n\n  return (\n    <Fragment>\n      { userID.length !== 0 &&\n        <div className = \"App\">\n          <Navbar name = {props.location.state.username} savedbutton =\"dontshow\" backbutton=\"Show\"/>\n          {contentData.length !== 0 ?\n            (\n              <div className = {Styles.outer}>\n                <div className = {SavedStyles.savediv}>\n                  <div>\n                    <h4>My Library</h4>\n                  </div>\n                  <div className = {SavedStyles.savedbuttons}>\n                    <div className={SavedStyles.buttongroup}>\n                      {/* <button className = {clickAll ? SavedStyles.clickedsavedbuttons : SavedStyles.defaultsavedbuttons} onClick = {e => applyfilter(\"All\")}>All</button> */}\n                      <button className = {clickVideo ? SavedStyles.clickedsavedbuttons : SavedStyles.defaultsavedbuttons} onClick = {e => applyfilter(\"Videos\")}>Videos</button>\n                      <button className = {clickArticle ? SavedStyles.clickedsavedbuttons : SavedStyles.defaultsavedbuttons} onClick = {e => applyfilter(\"Articles\")}>Articles</button>\n                      <button className = {clickPodcast ? SavedStyles.clickedsavedbuttons : SavedStyles.defaultsavedbuttons} onClick = {e => applyfilter(\"Podcast\")}>Podcast</button>\n                    </div>\n                      <p className = {clickNewest ? SavedStyles.clickednewestbuttons : SavedStyles.defaultnewestbuttons}\n                      onClick = {e => ClickedOnNewest(\"Newest\")}><BsArrowUpDown/>  Newest </p>\n                  </div>\n                </div>\n\n                { (defaultFilter && !newestFilter) &&\n                  <div>\n                    {contentData.map(content =>(\n                      <Content\n                        key = {content.content_id}\n                        isbookmarked = {true}\n                        userid ={props.location.state.userid}\n                        contentButtonName = {content.source_name}\n                        contenttype = {content.content_type}\n                        heading = {content.title}\n                        contentlink = {content.content_link}\n                        tag = {content.tags}\n                        text = {content.content_body}\n                        redirectlink = {content.source_link}\n                        contentID = {content.content_id}\n                        isSavedPage = {true}\n                        removeBookmarkContentChild = {removeBookmarkContentChild}\n                        />\n                      ))\n                    }\n                  </div>\n                }\n\n                { (videoFilter && !newestFilter) &&\n                  (<div>{contentData.filter(content =>\n                    content.content_type.includes('Videos')).length > 0 ?\n                    <div>\n                      {contentData.filter(content =>\n                        content.content_type.includes('Videos')).map(filterContent => (\n                          <Content\n                            key = {filterContent.content_id}\n                            isbookmarked = {true}\n                            userid ={props.location.state.userid}\n                            contentButtonName = {filterContent.source_name}\n                            contenttype = {filterContent.content_type}\n                            heading = {filterContent.title}\n                            contentlink = {filterContent.content_link}\n                            tag = {filterContent.tags}\n                            text = {filterContent.content_body}\n                            redirectlink = {filterContent.source_link}\n                            contentID = {filterContent.content_id}\n                            isSavedPage = {true}\n                            removeBookmarkContentChild = {removeBookmarkContentChild}\n                            />\n                        ))\n                      }\n                    </div> : <div className = {Styles.center}><p>Nothing to show</p> </div>\n                  }</div>)\n                }\n\n                { (articlesFilter && !newestFilter) &&\n                  (<div>{contentData.filter(content =>\n                    content.content_type.includes('Articles')).length > 0 ?\n                    <div>\n                      {contentData.filter(content =>\n                        content.content_type.includes('Articles')).map(filterContent => (\n                          <Content\n                            key = {filterContent.content_id}\n                            isbookmarked = {true}\n                            userid ={props.location.state.userid}\n                            contentButtonName = {filterContent.source_name}\n                            contenttype = {filterContent.content_type}\n                            heading = {filterContent.title}\n                            contentlink = {filterContent.content_link}\n                            tag = {filterContent.tags}\n                            text = {filterContent.content_body}\n                            redirectlink = {filterContent.source_link}\n                            contentID = {filterContent.content_id}\n                            isSavedPage = {true}\n                            removeBookmarkContentChild = {removeBookmarkContentChild}\n                            />\n                        ))\n                      }\n                    </div> : <div className = {Styles.center}><p>Nothing to show</p> </div>\n                  }</div>)\n                }\n\n                { (podcastFilter && !newestFilter) &&\n                  (<div>{contentData.filter(content =>\n                    content.content_type.includes('Podcast')).length > 0 ?\n                    <div>\n                      {contentData.filter(content =>\n                        content.content_type.includes('Podcast')).map(filterContent => (\n                          <Content\n                            key = {filterContent.content_id}\n                            isbookmarked = {true}\n                            userid ={props.location.state.userid}\n                            contentButtonName = {filterContent.source_name}\n                            contenttype = {filterContent.content_type}\n                            heading = {filterContent.title}\n                            contentlink = {filterContent.content_link}\n                            tag = {filterContent.tags}\n                            text = {filterContent.content_body}\n                            redirectlink = {filterContent.source_link}\n                            contentID = {filterContent.content_id}\n                            isSavedPage = {true}\n                            removeBookmarkContentChild = {removeBookmarkContentChild}\n                            />\n                        ))\n                      }\n                    </div> : <div className = {Styles.center}><p>Nothing to show</p> </div>\n                  }</div>)\n                }\n\n                { (defaultFilter && newestFilter) &&\n                  <div>\n                    {contentData.map(content =>(\n                        <Content\n                          key = {content.content_id}\n                          isbookmarked = {true}\n                          userid ={props.location.state.userid}\n                          contentButtonName = {content.source_name}\n                          contenttype = {content.content_type}\n                          heading = {content.title}\n                          contentlink = {content.content_link}\n                          tag = {content.tags}\n                          text = {content.content_body}\n                          redirectlink = {content.source_link}\n                          contentID = {content.content_id}\n                          isSavedPage = {true}\n                          removeBookmarkContentChild = {removeBookmarkContentChild}\n                          />\n                      ))\n                    }\n                  </div>\n                }\n\n                { (videoFilter && newestFilter) &&\n                  (<div>{contentData.filter(content =>\n                    content.content_type.includes('Videos')).length > 0 ?\n                    <div>\n                      {contentData.filter(content =>\n                        content.content_type.includes('Videos')).map(filterContent => (\n                          <Content\n                            key = {filterContent.content_id}\n                            isbookmarked = {true}\n                            userid ={props.location.state.userid}\n                            contentButtonName = {filterContent.source_name}\n                            contenttype = {filterContent.content_type}\n                            heading = {filterContent.title}\n                            contentlink = {filterContent.content_link}\n                            tag = {filterContent.tags}\n                            text = {filterContent.content_body}\n                            redirectlink = {filterContent.source_link}\n                            contentID = {filterContent.content_id}\n                            isSavedPage = {true}\n                            removeBookmarkContentChild = {removeBookmarkContentChild}\n                            />\n                        ))\n                      }\n                    </div> : <div className = {Styles.center}><p>Nothing to show</p> </div>\n                  }</div>)\n                }\n\n                { (articlesFilter && newestFilter) &&\n                  (<div>{contentData.filter(content =>\n                    content.content_type.includes('Articles')).length > 0 ?\n                    <div>\n                      {contentData.filter(content =>\n                        content.content_type.includes('Articles')).map(filterContent => (\n                          <Content\n                            key = {filterContent.content_id}\n                            isbookmarked = {true}\n                            userid ={props.location.state.userid}\n                            contentButtonName = {filterContent.source_name}\n                            contenttype = {filterContent.content_type}\n                            heading = {filterContent.title}\n                            contentlink = {filterContent.content_link}\n                            tag = {filterContent.tags}\n                            text = {filterContent.content_body}\n                            redirectlink = {filterContent.source_link}\n                            contentID = {filterContent.content_id}\n                            isSavedPage = {true}\n                            removeBookmarkContentChild = {removeBookmarkContentChild}\n                            />\n                        ))\n                      }\n                    </div> : <div className = {Styles.center}><p>Nothing to show</p> </div>\n                  }</div>)\n                }\n\n                { (podcastFilter && newestFilter) &&\n                  (<div>{contentData.filter(content =>\n                    content.content_type.includes('Podcast')).length > 0 ?\n                    <div>\n                      {contentData.filter(content =>\n                        content.content_type.includes('Podcast')).map(filterContent => (\n                          <Content\n                            key = {filterContent.content_id}\n                            isbookmarked = {true}\n                            userid ={props.location.state.userid}\n                            contentButtonName = {filterContent.source_name}\n                            contenttype = {filterContent.content_type}\n                            heading = {filterContent.title}\n                            contentlink = {filterContent.content_link}\n                            tag = {filterContent.tags}\n                            text = {filterContent.content_body}\n                            redirectlink = {filterContent.source_link}\n                            contentID = {filterContent.content_id}\n                            isSavedPage = {true}\n                            removeBookmarkContentChild = {removeBookmarkContentChild}\n                            />\n                        ))\n                      }\n                    </div> : <div className = {Styles.center}><p>Nothing to show</p> </div>\n                  }</div>)\n                }\n\n              </div>\n            ) :\n            (<div className = {Styles.center}><p>No content is bookmarked</p> </div>)\n          }\n        </div>\n      }\n    </Fragment>\n  );\n\n\n}\nexport default Saved;\n","/home/rajdeep/Desktop/beingpm/project/client/src/components/Singlecontent.js",["58"],"import React, {Fragment, useState, useEffect } from 'react';\nimport Content from \"./Content\"\n\n\nconst Singlecontent = (props) => {\n\n    // Now from dashboard we can pass what contents need to be displayed\n    // the rendering of content will be done in this section\n\n    const [contentData, setContentData] = useState([]);\n    const [bookmarkID, setBookmarkID] = useState([]);\n\n    async function getAllContent(){\n        try {\n            const response = await fetch(\"https://heypm-backend.herokuapp.com/getContent\",{\n                method: \"GET\",\n                headers: {token: localStorage.token}\n            });\n            const contentRes = await response.json();\n\n            //setContentData(contentRes);\n            try {\n                // to get content id bookmarked by the user today\n                const userid = props.userid;\n                const body = {userid};\n                const bookmarkIdResponse = await fetch(\"https://heypm-backend.herokuapp.com/getbookmarkID\", {\n                    method: \"POST\",\n                    headers:{\"Content-Type\": \"application/json\", token:localStorage.token},\n                    body: JSON.stringify(body)\n                });\n                const bookmarkIdRes =await bookmarkIdResponse.json();\n                setBookmarkID(bookmarkIdRes);\n                if (bookmarkID.length === 0) {\n                    setContentData(contentRes);\n                  } else {\n                    for (var i = 0; i < contentRes.length; i++) {\n                      let flag = false;\n                      for (var j = 0; j < bookmarkID.length; j++) {\n                        if (contentRes[i].content_id === bookmarkID[j].content_id) {\n                          flag = true;\n                          setContentData([ ...contentData, {\n                            isbookmarked: true,\n                            source_name: contentRes[i].source_name,\n                            content_type: contentRes[i].content_type,\n                            title: contentRes[i].title,\n                            content_link: contentRes[i].content_link,\n                            tags: contentRes[i].tags,\n                            content_body: contentRes[i].content_body,\n                            source_link: contentRes[i].source_link,\n                            content_id: contentRes[i].content_id\n                          }]);\n                          break;\n                        }\n                      }\n                      if (!flag) {\n                        setContentData([ ...contentData, {\n                          isbookmarked: false,\n                          source_name: contentRes[i].source_name,\n                          content_type: contentRes[i].content_type,\n                          title: contentRes[i].title,\n                          content_link: contentRes[i].content_link,\n                          tags: contentRes[i].tags,\n                          content_body: contentRes[i].content_body,\n                          source_link: contentRes[i].source_link,\n                          content_id: contentRes[i].content_id\n                        }]);\n                      }\n                    }\n                  }\n\n            } catch (err) {\n                //console.log(err.message);\n            }\n\n        } catch (err) {\n            //console.error(err.message);\n        }\n    }\n\n    useEffect(()=>{\n        getAllContent();\n    },[]);\n\n    return (\n        <Fragment>\n        {contentData.length === 3 &&\n        <div>\n          {contentData.map(content =>(\n            <Content\n              key = {content.content_id}\n              isbookmarked = {content.isbookmarked}\n              userid ={props.userid}\n              contentButtonName = {content.source_name}\n              contenttype = {content.content_type}\n              heading = {content.title}\n              contentlink = {content.content_link}\n              tag = {content.tags}\n              text = {content.content_body}\n              redirectlink = {content.source_link}\n              contentID = {content.content_id}\n              />\n          ))}\n        </div>\n      }\n        </Fragment>\n    );\n}\nexport default Singlecontent;\n","/home/rajdeep/Desktop/beingpm/project/client/src/components/Navbar.js",["59"],"import React, { useState } from 'react';\nimport './Navbar.css';\nimport { FaBookmark } from 'react-icons/fa';\nimport { GrPrevious } from \"react-icons/gr\";\n\nimport loginicon from '../assets/loginicon.png';\nimport { Link } from 'react-router-dom';\n\nconst navbar = (props) => {\n    \n    const profileClick = async() => {\n        //console.log(\"Clicked on profile\");\n       \n    }\n\n    const savedIconClick = () => {\n        //console.log(\"Clicked on saved icon\");\n    }\n\n\n    return (\n        <div className = \"Navbar\">\n            <div className=\"left-header\">\n\n                { props.backbutton === \"Show\" ?\n                <Link to=\"/dashboard\"> <GrPrevious className=\"previousPageIcon\" /> </Link> :\n                <div></div> }\n\n                <Link to={{pathname: '/profile', state: { userid: props.userid, username: props.name,\n                 } }}  >\n                <div className = \"profile\" onClick = {profileClick}>\n                    {/* Profile is made visible here*/}\n                    <img src={loginicon} alt=\"\" />                \n                </div>\n                </Link>\n                <div className = \"profile-name\">\n                    <p>Hello, {props.name}</p>\n                </div>\n                \n            </div>\n            { props.savedbutton === \"Show\" ?\n                (<div className = \"saved\" onClick = {savedIconClick}>\n                <Link to={{pathname: '/saved', state: { userid: props.userid, username: props.name} }} > <p><FaBookmark className=\"bookmark\"/>  My Library </p> </Link>\n                </div> )\n                :\n                (<div></div> )\n            }\n\n        </div>\n    );\n}\nexport default navbar;\n","/home/rajdeep/Desktop/beingpm/project/client/src/components/Content.js",["60","61"],"import React, {useState, useEffect } from 'react';\nimport './Content.css';\n//import ReactPlayer from 'react-player';\nimport { FaBookmark, FaRegBookmark } from 'react-icons/fa';\nimport { IoArrowForward } from 'react-icons/io5';\nimport { toast } from 'react-toastify';\n\ntoast.configure();\n\nconst Content = (props) => {\n\n    const [bookmark, setBookmark] = useState(false);\n    const [savedPage, setSavedPage] = useState(false);\n\n    const toggleSaved = async() => {\n\n        const userID= props.userid;\n        const contentID = props.contentID;\n        const body = {userID, contentID};\n\n        if (bookmark) {\n            try {\n\n                const response = await fetch(\"https://heypm-backend.herokuapp.com/removebookmarkContent\",{\n                    method: \"POST\",\n                    headers: {\"Content-Type\": \"application/json\", token: localStorage.token},\n                    body: JSON.stringify(body)\n                });\n                const contentRes = await response.json();\n                toast.error(contentRes,\n                  {autoClose:2000, position: toast.POSITION.BOTTOM_RIGHT});\n                setBookmark(false);\n                if (savedPage) {\n                    props.removeBookmarkContentChild(props.contentID);\n                  }\n\n            } catch (err) {\n              toast.error(err.message,\n                {autoClose:2000, position: toast.POSITION.BOTTOM_RIGHT});\n                //console.error(err.message);\n            }\n        }\n        else{\n            try {\n                const response = await fetch(\"https://heypm-backend.herokuapp.com/bookmarkContent\",{\n                    method: \"POST\",\n                    headers: {\"Content-Type\": \"application/json\", token: localStorage.token},\n                    body: JSON.stringify(body)\n                });\n                const contentRes = await response.json();\n                toast.success(contentRes,\n                  {autoClose:2000, position: toast.POSITION.BOTTOM_RIGHT});\n                setBookmark(true);\n\n            } catch (err) {\n                toast.error(err.message,\n                  {autoClose:2000, position: toast.POSITION.BOTTOM_RIGHT});\n                //console.error(err.message);\n            }\n        }\n    }\n\n    useEffect(()=>{\n        setBookmark(props.isbookmarked);\n        setSavedPage(props.isSavedPage);\n    },[]);\n\n    return (\n        <div className = \"content\">\n\n            <div className = \"heading\">\n                <h2>{props.heading}</h2>\n            </div>\n            {/* image div */}\n            <div>\n            {props.contenttype === \"Videos\" ?\n                (<div className = \"image\">\n                        <iframe\n                        title=\"No title set\"\n                        width=\"100%\"\n                        height=\"100%\"\n                        margin = \"auto\"\n                        display = \"block\"\n                        border-radius = \"20px\"\n                        src={props.contentlink}\n                        frameBorder=\"0\"\n                        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                        allowFullScreen\n                        >\n                        </iframe>\n                </div>) :\n                (<div className = \"image\">\n                    <img src = {props.contentlink} alt=\"\" />\n\n                    {/* https://www.youtube.com/embed/_Hp_dI0DzY4\" */}\n\n                    {/* <ReactPlayer\n                        width = '100%'\n                        height = '100%'\n                        url = ''/> */}\n                </div>)\n            }\n            </div>\n\n\n            <div className = \"tag-saved\">\n                <div className = \"tag\">\n                    <a > { props.tag } </a>\n                </div>\n                <div className = \"saved\" onClick = {toggleSaved}>\n                {bookmark === true ?  (<FaBookmark/>) : (<FaRegBookmark/>) }\n                </div>\n            </div>\n            <div className = \"text\">\n                <p> {props.text} </p>\n            </div>\n            <div  className=\"wrapper\">\n                <a href = {props.redirectlink} target=\"_blank\" rel=\"noreferrer\" >\n                    <button className = \"buttonlink\">{props.contentButtonName}\n                    <IoArrowForward className=\"button-arrow-icon\"/> </button>\n                </a>\n            </div>\n        </div>\n    );\n}\nexport default Content;\n","/home/rajdeep/Desktop/beingpm/project/client/src/components/Profile.js",["62"],"import React, { useState, useEffect } from 'react'\nimport Navbar from './Navbar';\nimport {VscSmiley} from \"react-icons/vsc\";\nimport Styles from \"./ProfileStyle.css\";\n\nconst Profile = (props, {setAuth}) => {\n\n    const [ fullname, setFullname ] = useState(\"\"); \n    const [ email, setEmail ] = useState(\"\");\n\n    async function getUserDetails() {\n        try {\n            const response = await fetch(\"https://heypm-backend.herokuapp.com/dashboard/\",{\n                method: \"GET\",\n                headers: {token: localStorage.token}\n            });\n            const parseRes = await response.json();\n            console.log(parseRes);\n\n            const name = parseRes.user_name;\n            setFullname(name);\n            setEmail(parseRes.user_email);\n\n        } catch (err) {\n            //console.error(err.message);\n        }\n    }\n\n    const logout = (e) =>{\n        e.preventDefault();\n        localStorage.removeItem(\"token\");\n        props.setAuth(false);\n        //toast(\"Logged out successfully!\"); // not working\n    };\n\n    useEffect(()=>{\n        getUserDetails()\n    },[]); \n\n    return (\n        <div>\n            <Navbar name = {props.location.state.username}\n            userid={props.location.state.userid} savedbutton =\"Show\"  backbutton=\"Show\"/>\n            <div className = \"profile-section\">\n            <div className = \"profile-header\">\n                <div>\n                    <h4>Your Profile</h4>\n                </div>\n            </div>\n            <div className = \"profile-picture\">\n                <div>\n                    <VscSmiley size = {80}/>\n                </div>\n            </div>\n            <div className = \"Profile-content\">\n                <div className = \"name\">\n                    <div className = \"question\">\n                        <p>Name</p>\n                    </div>\n                    <div>\n                        <p>{fullname}</p>\n                    </div>\n                </div>\n\n                <div className = \"user-name\">\n                    <div className = \"question\">\n                        <p>Username</p>\n                    </div>\n                    <div>\n                        <p>My_username</p>\n                    </div>\n                </div>\n\n                <div className = \"user-email\">\n                    <div className = \"question\">\n                        <p>Email ID</p>\n                    </div>\n                    <div>\n                        <p>{email}</p>\n                    </div>\n                </div>\n                <div>\n                    <hr></hr>\n                </div>\n                {/* <div className = \"change-password\">\n                    <p>Change Password</p>\n                </div>\n\n                <div>\n                    <hr></hr>\n                </div> */}\n                <div className = \"log-out\">\n                    <p onClick= {e => logout(e)}>Log Out</p>\n                </div>\n\n            </div>\n        </div>\n        </div>\n    )\n}\n\nexport default Profile\n",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":6,"column":27,"nodeType":"69","messageId":"70","endLine":6,"endColumn":41},{"ruleId":"67","severity":1,"message":"71","line":28,"column":10,"nodeType":"69","messageId":"70","endLine":28,"endColumn":18},{"ruleId":"67","severity":1,"message":"72","line":73,"column":9,"nodeType":"69","messageId":"70","endLine":73,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":135,"column":5,"nodeType":"75","endLine":135,"endColumn":18,"suggestions":"76"},{"ruleId":"73","severity":1,"message":"77","line":82,"column":7,"nodeType":"75","endLine":82,"endColumn":9,"suggestions":"78"},{"ruleId":"67","severity":1,"message":"79","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":25},{"ruleId":"73","severity":1,"message":"80","line":66,"column":7,"nodeType":"75","endLine":66,"endColumn":9,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":108,"column":21,"nodeType":"84","endLine":108,"endColumn":25},{"ruleId":"67","severity":1,"message":"85","line":4,"column":8,"nodeType":"69","messageId":"70","endLine":4,"endColumn":14},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'GetStartedIcon' is defined but never used.","Identifier","unusedVar","'clickAll' is assigned a value but never used.","'empVideoFilter' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getSavedContent'. Either include it or remove the dependency array.","ArrayExpression",["88"],"React Hook useEffect has a missing dependency: 'getAllContent'. Either include it or remove the dependency array.",["89"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'props.isSavedPage' and 'props.isbookmarked'. Either include them or remove the dependency array. If 'setBookmark' needs the current value of 'props.isbookmarked', you can also switch to useReducer instead of useState and read 'props.isbookmarked' in the reducer.",["90"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Styles' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},"Update the dependencies array to be: [getSavedContent, removeSaved]",{"range":"97","text":"98"},"Update the dependencies array to be: [getAllContent]",{"range":"99","text":"100"},"Update the dependencies array to be: [props.isSavedPage, props.isbookmarked]",{"range":"101","text":"102"},[3627,3640],"[getSavedContent, removeSaved]",[3432,3434],"[getAllContent]",[2352,2354],"[props.isSavedPage, props.isbookmarked]"]